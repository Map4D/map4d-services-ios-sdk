// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Map4dServices
import CoreLocation
import Foundation
@_exported import Map4dServices
import MapKit
import Swift
@_inheritsConvenienceInitializers @objcMembers @objc open class MFDistanceMatrix : ObjectiveC.NSObject, Swift.Codable {
  @objc public var rows: [Map4dServices.MFDistanceMatrix.Row]?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case rows
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class MFNearbySearchOptions : ObjectiveC.NSObject {
  @objc public var location: CoreLocation.CLLocationCoordinate2D
  @objc public var radius: Swift.Int
  @objc public var text: Swift.String?
  @objc public var types: [Swift.String]?
  @objc public var tags: [Swift.String]?
  @objc public var datetime: Foundation.Date?
  @objc public var accuracy: Swift.Int
  @objc public init(location: CoreLocation.CLLocationCoordinate2D, radius: Swift.Int)
  @objc deinit
  @objc override dynamic public init()
}
public typealias MFServiceCompletion<T> = (T?, Map4dServices.MFServiceError?) -> Swift.Void
@objc public protocol MFServiceTask {
  @objc func abort()
}
@objc public protocol MFServiceError {
  @objc var errorCode: Swift.String { get }
  @objc var errorMessage: Swift.String { get }
}
extension MFDistanceMatrix {
  @_inheritsConvenienceInitializers @objc(MFDistanceMatrixRow) open class Row : ObjectiveC.NSObject, Swift.Codable {
    @objc public var elements: [Map4dServices.MFDistanceMatrix.Element]?
    @objc deinit
    @objc override dynamic public init()
    required public init(from decoder: Swift.Decoder) throws
    open func encode(to encoder: Swift.Encoder) throws
  }
}
@_inheritsConvenienceInitializers @objc public class MFGeocodeOptions : ObjectiveC.NSObject {
  @objc public var location: CoreLocation.CLLocation?
  @objc public var address: Swift.String?
  @objc public var northEast: CoreLocation.CLLocation?
  @objc public var southWest: CoreLocation.CLLocation?
  @objc deinit
  @objc override dynamic public init()
}
extension MFRoute {
  @objc(MFRouteWeighting) public enum Weighting : Swift.Int, Swift.Codable {
    case shortest = 0
    case fastest = 1
    case balance = 2
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
}
@_inheritsConvenienceInitializers @objc public class MFAutocompleteService : ObjectiveC.NSObject {
  @discardableResult
  @objc public func getQueryPredictions(options: Map4dServices.MFQueryAutocompletionOptions, completion: @escaping Map4dServices.MFServiceCompletion<[Map4dServices.MFPlace]>) -> Map4dServices.MFServiceTask?
  @objc deinit
  @objc override dynamic public init()
}
extension NSError : Map4dServices.MFServiceError {
  @objc dynamic public var errorCode: Swift.String {
    @objc get
  }
  @objc dynamic public var errorMessage: Swift.String {
    @objc get
  }
}
@objcMembers @objc open class MFRoute : ObjectiveC.NSObject, Swift.Codable {
  @objc public var summary: Swift.String
  @objc public var overviewCoordinates: [CoreLocation.CLLocationCoordinate2D]
  @objc public var legs: [Map4dServices.MFRoute.Leg]
  @objc public var distance: Map4dServices.MFRoute.Info
  @objc public var duration: Map4dServices.MFRoute.Info
  @objc public var snappedCoordinates: [CoreLocation.CLLocationCoordinate2D]
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case summary
    case overviewCoordinates
    case legs
    case distance
    case duration
    case snappedCoordinates
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  @objc override dynamic public init()
}
extension MFRoute {
  @objc(MFRouteStep) open class Step : ObjectiveC.NSObject, Swift.Codable {
    @objc public var instruction: Swift.String
    @objc public var maneuver: Map4dServices.MFManeuver
    @objc public var distance: Map4dServices.MFRoute.Info
    @objc public var duration: Map4dServices.MFRoute.Info
    @objc public var startCoordinate: CoreLocation.CLLocationCoordinate2D
    @objc public var endCoordinate: CoreLocation.CLLocationCoordinate2D
    @objc public var coordinates: [CoreLocation.CLLocationCoordinate2D]
    @objc public var streetName: Swift.String
    @objc public var mode: Map4dServices.MFTravelMode
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case instruction
      case maneuver
      case distance
      case duration
      case startCoordinate
      case endCoordinate
      case coordinates
      case streetName
      case mode
      public typealias RawValue = Swift.String
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
      public init?(stringValue: Swift.String)
      public var intValue: Swift.Int? {
        get
      }
      public init?(intValue: Swift.Int)
    }
    public func encode(to encoder: Swift.Encoder) throws
    required public init(from decoder: Swift.Decoder) throws
    @objc deinit
    @objc override dynamic public init()
  }
}
@_inheritsConvenienceInitializers @objc public class MFDistanceMatrixService : ObjectiveC.NSObject {
  @discardableResult
  @objc public func getDistanceMatrix(options: Map4dServices.MFDistanceMatrixOptions, completion: @escaping Map4dServices.MFServiceCompletion<Map4dServices.MFDistanceMatrix>) -> Map4dServices.MFServiceTask?
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class MFPlacesService : ObjectiveC.NSObject {
  @discardableResult
  @objc public func getDetails(placeId: Swift.String, completion: @escaping Map4dServices.MFServiceCompletion<Map4dServices.MFPlaceDetails>) -> Map4dServices.MFServiceTask?
  @discardableResult
  @objc public func textSearch(options: Map4dServices.MFTextSearchOptions, completion: @escaping Map4dServices.MFServiceCompletion<[Map4dServices.MFPlace]>) -> Map4dServices.MFServiceTask?
  @discardableResult
  @objc public func nearbySearch(options: Map4dServices.MFNearbySearchOptions, completion: @escaping Map4dServices.MFServiceCompletion<[Map4dServices.MFPlace]>) -> Map4dServices.MFServiceTask?
  @discardableResult
  @objc public func viewboxSearch(options: Map4dServices.MFViewboxSearchOptions, completion: @escaping Map4dServices.MFServiceCompletion<[Map4dServices.MFPlace]>) -> Map4dServices.MFServiceTask?
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class MFPlaceDetails : Map4dServices.MFPlace {
  @objc public var desc: Swift.String?
  @objc public var tags: [Swift.String]?
  @objc public var metadatas: [Map4dServices.MFPlaceDetails.Metadata]?
  @objc public var photos: [Map4dServices.MFPlaceDetails.PhotoInfo]?
  @objc public var addressComponents: [Map4dServices.MFPlaceDetails.AddressComponent]?
  @objc public var objectId: Swift.String?
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension MFPlaceDetails {
  @objc(MFPlaceAddressComponent) public class AddressComponent : ObjectiveC.NSObject, Swift.Codable {
    @objc public var code: Swift.String
    @objc public var type: Swift.String
    @objc public var name: Swift.String
    @objc deinit
    required public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
}
extension MFPlaceDetails {
  @objc(MFPlaceMetadata) public class Metadata : ObjectiveC.NSObject, Swift.Codable {
    @objc public var id: Swift.String
    @objc public var type: Swift.String
    @objc public var name: Swift.String
    @objc public var content: Swift.String
    @objc public var order: Swift.Int
    @objc deinit
    required public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
}
extension MFPlaceDetails {
  @objc(MFPlacePhotoInfo) public class PhotoInfo : ObjectiveC.NSObject, Swift.Codable {
    @objc public var url: Swift.String
    @objc public var name: Swift.String?
    @objc deinit
    required public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
}
extension CLLocationCoordinate2D : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case lat
    case lng
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class MFDirectionService : ObjectiveC.NSObject {
  @discardableResult
  @objc public func route(options: Map4dServices.MFDirectionOptions, completion: @escaping Map4dServices.MFServiceCompletion<[Map4dServices.MFRoute]>) -> Map4dServices.MFServiceTask?
  @objc deinit
  @objc override dynamic public init()
}
@objcMembers @objc public class MFPlace : ObjectiveC.NSObject, Swift.Codable {
  @objc public var id: Swift.String?
  @objc public var name: Swift.String
  @objc public var address: Swift.String
  @objc public var location: CoreLocation.CLLocationCoordinate2D
  @objc public var types: [Swift.String]?
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public init()
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc public class MFQueryAutocompletionOptions : ObjectiveC.NSObject {
  @objc public var text: Swift.String
  @objc public var location: CoreLocation.CLLocation?
  @objc public init(text: Swift.String, location: CoreLocation.CLLocation? = nil)
  @objc deinit
  @objc override dynamic public init()
}
extension URLSessionTask {
  @objc dynamic public func abort()
}
@objc public class MFTextSearchOptions : ObjectiveC.NSObject {
  @objc public var text: Swift.String
  @objc public var types: [Swift.String]?
  @objc public var datetime: Foundation.Date?
  @objc public var location: CoreLocation.CLLocation?
  @objc public var accuracy: Swift.Int
  @objc public init(text: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
public struct Polyline {
  public let coordinates: [CoreLocation.CLLocationCoordinate2D]?
  public let encodedPolyline: Swift.String
  public let levels: [Swift.UInt32]?
  public let encodedLevels: Swift.String?
  public var locations: [CoreLocation.CLLocation]? {
    get
  }
  @available(tvOS 9.2, *)
  public var mkPolyline: MapKit.MKPolyline? {
    get
  }
  public init(coordinates: [CoreLocation.CLLocationCoordinate2D], levels: [Swift.UInt32]? = nil, precision: Swift.Double = 1e5)
  public init(encodedPolyline: Swift.String, encodedLevels: Swift.String? = nil, precision: Swift.Double = 1e5)
  public init(locations: [CoreLocation.CLLocation], levels: [Swift.UInt32]? = nil, precision: Swift.Double = 1e5)
}
public func encodeCoordinates(_ coordinates: [CoreLocation.CLLocationCoordinate2D], precision: Swift.Double = 1e5) -> Swift.String
public func encodeLocations(_ locations: [CoreLocation.CLLocation], precision: Swift.Double = 1e5) -> Swift.String
public func encodeLevels(_ levels: [Swift.UInt32]) -> Swift.String
public func decodePolyline(_ encodedPolyline: Swift.String, precision: Swift.Double = 1e5) -> [CoreLocation.CLLocationCoordinate2D]?
public func decodePolyline(_ encodedPolyline: Swift.String, precision: Swift.Double = 1e5) -> [CoreLocation.CLLocation]?
public func decodeLevels(_ encodedLevels: Swift.String) -> [Swift.UInt32]?
@objcMembers @objc open class MFWaypoint : ObjectiveC.NSObject {
  @objc public var coordinate: CoreLocation.CLLocationCoordinate2D
  @objc open var name: Swift.String?
  @objc public init(coordinate: CoreLocation.CLLocationCoordinate2D, name: Swift.String? = nil)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc open func clone() -> Map4dServices.MFWaypoint
  @objc deinit
  @objc override dynamic public init()
}
extension MFDistanceMatrix {
  @_inheritsConvenienceInitializers @objc(MFDistanceMatrixElement) open class Element : ObjectiveC.NSObject, Swift.Codable {
    @objc public var distance: Map4dServices.MFDistanceMatrix.Info?
    @objc public var duration: Map4dServices.MFDistanceMatrix.Info?
    @objc public var status: Swift.String?
    @objc deinit
    @objc override dynamic public init()
    required public init(from decoder: Swift.Decoder) throws
    open func encode(to encoder: Swift.Encoder) throws
  }
}
public enum Error : Swift.Error {
  case http(Swift.Int, Swift.String)
  case invalidResponse(Swift.String)
  case exception(Swift.String, Swift.String)
}
extension MFDistanceMatrix {
  @objc(MFDistanceMatrixInfo) open class Info : ObjectiveC.NSObject, Swift.Codable {
    @objc public var text: Swift.String
    @objc public var value: Swift.Double
    @objc deinit
    required public init(from decoder: Swift.Decoder) throws
    open func encode(to encoder: Swift.Encoder) throws
  }
}
public enum Method : Swift.String, Swift.CaseIterable {
  case get
  case post
  case patch
  case put
  case delete
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [Map4dServices.Method]
  public static var allCases: [Map4dServices.Method] {
    get
  }
}
public protocol Request {
  associatedtype Element : Swift.Decodable
  var scheme: Swift.String { get }
  var host: Swift.String { get }
  var path: Swift.String { get }
  var headers: [Swift.String : Swift.String] { get }
  var authorization: Swift.String? { get }
  var params: [Swift.String : Swift.String] { get }
  var data: [Swift.String : (Foundation.Data, Swift.String?)] { get }
  var method: Map4dServices.Method { get }
  var timeout: Swift.Double { get }
  func asURLRequest() -> Foundation.URLRequest
  func decode(data: Foundation.Data) throws -> Self.Element
}
@objc public enum MFManeuver : Swift.Int, Swift.CustomStringConvertible, Swift.Codable {
  case none
  case keepLeft
  case keepRight
  case turnSharpRight
  case turnSharpLeft
  case turnLeft
  case turnRight
  case turnSlightLeft
  case turnSlightRight
  case continueOnStreet
  case finish
  case roundaboutLeft
  case roundaboutRight
  case reachedVia
  public init(describing: Swift.String)
  public var description: Swift.String {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension MFRoute {
  @objcMembers @objc(MFRouteLeg) open class Leg : ObjectiveC.NSObject, Swift.Codable {
    @objc public var distance: Map4dServices.MFRoute.Info
    @objc public var duration: Map4dServices.MFRoute.Info
    @objc public var startAddress: Swift.String
    @objc public var endAddress: Swift.String
    @objc public var startCoordinate: CoreLocation.CLLocationCoordinate2D
    @objc public var endCoordinate: CoreLocation.CLLocationCoordinate2D
    @objc public var steps: [Map4dServices.MFRoute.Step]
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case distance
      case duration
      case startAddress
      case endAddress
      case startCoordinate
      case endCoordinate
      case steps
      public typealias RawValue = Swift.String
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
      public init?(stringValue: Swift.String)
      public var intValue: Swift.Int? {
        get
      }
      public init?(intValue: Swift.Int)
    }
    @objc deinit
    required public init(from decoder: Swift.Decoder) throws
    open func encode(to encoder: Swift.Encoder) throws
  }
}
@_inheritsConvenienceInitializers @objc public class MFDirectionOptions : ObjectiveC.NSObject {
  @objc public var origin: CoreLocation.CLLocation?
  @objc public var destination: CoreLocation.CLLocation?
  @objc public var waypoints: [Map4dServices.MFWaypoint]?
  @objc public var mode: Map4dServices.MFTravelMode
  @objc public var language: Swift.String?
  @objc public var weighting: Map4dServices.MFRoute.Weighting
  @objc deinit
  @objc override dynamic public init()
}
extension MFRoute {
  @objc(MFRouteInfo) open class Info : ObjectiveC.NSObject, Swift.Codable {
    @objc public var text: Swift.String
    @objc public var value: Swift.Double
    @objc deinit
    required public init(from decoder: Swift.Decoder) throws
    open func encode(to encoder: Swift.Encoder) throws
  }
}
@objc public class MFDistanceMatrixOptions : ObjectiveC.NSObject {
  @objc public var origins: [Map4dServices.MFWaypoint]
  @objc public var destinations: [Map4dServices.MFWaypoint]
  @objc public var mode: Map4dServices.MFTravelMode
  @objc public var language: Swift.String
  @objc public init(origins: [Map4dServices.MFWaypoint], destinations: [Map4dServices.MFWaypoint])
  @objc deinit
  @objc override dynamic public init()
}
@objc public class MFViewboxSearchOptions : ObjectiveC.NSObject {
  @objc public var southWest: CoreLocation.CLLocationCoordinate2D
  @objc public var northEast: CoreLocation.CLLocationCoordinate2D
  @objc public var text: Swift.String?
  @objc public var types: [Swift.String]?
  @objc public var tags: [Swift.String]?
  @objc public var datetime: Foundation.Date?
  @objc public var accuracy: Swift.Int
  @objc public init(southWest: CoreLocation.CLLocationCoordinate2D, northEast: CoreLocation.CLLocationCoordinate2D)
  @objc deinit
  @objc override dynamic public init()
}
@objc public enum MFTravelMode : Swift.Int, Swift.CustomStringConvertible, Swift.Codable {
  case car = 0
  case bike
  case foot
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public var description: Swift.String {
    get
  }
  public init(describing: Swift.String)
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MFGeocodeService : ObjectiveC.NSObject {
  @discardableResult
  @objc public func geocode(options: Map4dServices.MFGeocodeOptions, completion: @escaping Map4dServices.MFServiceCompletion<[Map4dServices.MFPlace]>) -> Map4dServices.MFServiceTask?
  @objc deinit
  @objc override dynamic public init()
}
extension Map4dServices.MFDistanceMatrix.CodingKeys : Swift.Equatable {}
extension Map4dServices.MFDistanceMatrix.CodingKeys : Swift.Hashable {}
extension Map4dServices.MFDistanceMatrix.CodingKeys : Swift.RawRepresentable {}
extension Map4dServices.MFRoute.Weighting : Swift.Equatable {}
extension Map4dServices.MFRoute.Weighting : Swift.Hashable {}
extension Map4dServices.MFRoute.Weighting : Swift.RawRepresentable {}
extension Map4dServices.MFRoute.CodingKeys : Swift.Equatable {}
extension Map4dServices.MFRoute.CodingKeys : Swift.Hashable {}
extension Map4dServices.MFRoute.CodingKeys : Swift.RawRepresentable {}
extension Map4dServices.MFRoute.Step.CodingKeys : Swift.Equatable {}
extension Map4dServices.MFRoute.Step.CodingKeys : Swift.Hashable {}
extension Map4dServices.MFRoute.Step.CodingKeys : Swift.RawRepresentable {}
extension CoreLocation.CLLocationCoordinate2D.CodingKeys : Swift.Equatable {}
extension CoreLocation.CLLocationCoordinate2D.CodingKeys : Swift.Hashable {}
extension CoreLocation.CLLocationCoordinate2D.CodingKeys : Swift.RawRepresentable {}
extension Foundation.URLSessionTask : Map4dServices.MFServiceTask {}
extension Map4dServices.Method : Swift.Equatable {}
extension Map4dServices.Method : Swift.Hashable {}
extension Map4dServices.Method : Swift.RawRepresentable {}
extension Map4dServices.MFManeuver : Swift.Equatable {}
extension Map4dServices.MFManeuver : Swift.Hashable {}
extension Map4dServices.MFManeuver : Swift.RawRepresentable {}
extension Map4dServices.MFRoute.Leg.CodingKeys : Swift.Equatable {}
extension Map4dServices.MFRoute.Leg.CodingKeys : Swift.Hashable {}
extension Map4dServices.MFRoute.Leg.CodingKeys : Swift.RawRepresentable {}
extension Map4dServices.MFTravelMode : Swift.Equatable {}
extension Map4dServices.MFTravelMode : Swift.Hashable {}
extension Map4dServices.MFTravelMode : Swift.RawRepresentable {}
